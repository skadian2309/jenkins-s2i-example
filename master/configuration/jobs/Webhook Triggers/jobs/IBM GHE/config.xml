<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Act on web hooks triggered from IBM GitHub Enterprise repositories</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>git_host</name>
          <description></description>
          <defaultValue>github.ibm.com</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <org.jenkinsci.plugins.gwt.GenericTrigger plugin="generic-webhook-trigger@1.67">
      <spec></spec>
      <genericVariables>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>repo_name</key>
          <value>$.repository.name</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>GitURL</key>
          <value>$.repository.clone_url</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>org_name</key>
          <value>$.repository.owner.login</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>SOURCE_BRANCH</key>
          <value>$.repository.default_branch</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
        <org.jenkinsci.plugins.gwt.GenericVariable>
          <expressionType>JSONPath</expressionType>
          <key>EMAILID</key>
          <value>$.repository.owner.email</value>
          <regexpFilter></regexpFilter>
          <defaultValue></defaultValue>
        </org.jenkinsci.plugins.gwt.GenericVariable>
      </genericVariables>
      <regexpFilterText></regexpFilterText>
      <regexpFilterExpression></regexpFilterExpression>
      <printPostContent>false</printPostContent>
      <printContributedVariables>false</printContributedVariables>
      <causeString>Generic Cause</causeString>
      <token>TEL6XCLzuVsfFr3mrinoSAFIoJB5yVB3</token>
      <silentResponse>false</silentResponse>
      <overrideQuietPeriod>false</overrideQuietPeriod>
    </org.jenkinsci.plugins.gwt.GenericTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo git repo url is $GitURL
echo git repo name is $repo_name
echo git Email ID is $EMAILID
echo git Source Branch is $SOURCE_BRANCH

MAIN_BRANCH=&quot;master&quot;
QA_BRANCH=&quot;qa&quot;
DEV_BRANCH=&quot;dev&quot;

SOURCE_ORG_NAME=&quot;experiential-squads&quot;



NAMESPACE_EMAILID=`echo $EMAILID | sed &apos;s/@/-AT-&apos;/g`
NAMESPACE_LABEL=&quot;owner=${NAMESPACE_EMAILID}&quot;
echo $NAMESPACE_LABEL

COMMITER_NAMESPACE=`oc get project -l $NAMESPACE_LABEL | awk &apos;{if ($1!=&quot;NAME&quot;) print $1}&apos;`

#git_clone_url=$(sed &quot;s/$git_host/$git_cred@$git_host/&quot; &lt;&lt;&lt; $clone_url)

git_base=$(echo $GitURL  | sed &apos;s/https:\/\///g&apos;)

pipeline_name=&quot;$org_name&quot;-&quot;$repo_name&quot;


#orginal_repo_name=&quot;experiential-squads/ref-impl-2-1-estore-monolith&quot;

#context_repo_name=&quot;$org_name/$repo_name&quot;
#orginal_project_name=&quot;ref-impl-2-1&quot;


pipeline_name=$(echo $pipeline_name | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)
echo Pipeline Name is $pipeline_name

rm -rf $repo_name 2&gt; /dev/null 

git clone https://${git_token}@$git_base

wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O jq &amp;&amp; chmod 700 jq



cd $repo_name

TARGET_PROJECT_NAME=`../jq -r &apos;.project_name&apos; devops/env.json`




commiternamespace()
{

  ##Changinig namespace in env.json 
  ENV_NAMESPACE=`../jq  -r &apos;.project_name&apos; devops/env.json`
  sed -i &quot;s/$ENV_NAMESPACE/$COMMITER_NAMESPACE/g&quot; devops/env.json
  TMP_NAMESPACE=`../jq  -r &apos;.project_name&apos; devops/env.json`
  echo &quot;Deploying Application in your namespace $TMP_NAMESPACE&quot;

}


targetnamespace()
{
  ##Changinig namespace in env.json 
  ENV_NAMESPACE=`../jq  -r &apos;.project_name&apos; devops/env.json`
  sed -i &quot;s/$ENV_NAMESPACE/$TARGET_PROJECT_NAME/g&quot; devops/env.json
  TMP_NAMESPACE=`../jq  -r &apos;.project_name&apos; devops/env.json`
  echo &quot;Deploying Application in the namespace $TMP_NAMESPACE&quot;
 

}






if [ &quot;$SOURCE_ORG_NAME&quot; == &quot;$org_name&quot;  ];then


case $SOURCE_BRANCH in

  $MAIN_BRANCH)
 
   TARGET_PROJECT_NAME=${TARGET_PROJECT_NAME}
   ;;
 
  $QA_BRANCH)
 
   TARGET_PROJECT_NAME=${TARGET_PROJECT_NAME}-${SOURCE_BRANCH}
   targetnamespace
   ;;
 
  $DEV_BRANCH)

   TARGET_PROJECT_NAME=${TARGET_PROJECT_NAME}-${SOURCE_BRANCH}
   targetnamespace
   ;;
   
   *)

   TARGET_PROJECT_NAME=$COMMITER_NAMESPACE

   commiternamespace
    ;;
 esac
 


else

  commiternamespace


 
fi 
 




DEVOPS_NAMESPACE=&quot;devops&quot;


oc project $DEVOPS_NAMESPACE


oc process -f devops/buildconfig_template.yaml SOURCE_REPOSITORY_URL=$GitURL COMPONENT_NAME=$pipeline_name NAMESPACE=&quot;$TARGET_PROJECT_NAME&quot; | oc apply -f-  
oc set build-hook bc/$pipeline_name --post-commit --command -- /bin/bash -c ls -ltr
oc start-build $pipeline_name</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.15">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordBinding>
          <credentialsId>git_pass</credentialsId>
          <variable>git_token</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>